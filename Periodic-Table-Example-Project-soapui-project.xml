<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project activeEnvironment="Default" name="Periodic_Table_Example_Project" resourceRoot="" soapui-version="5.3.0" id="75824cce-9666-488c-b066-772d8c118bdf" abortOnError="false" runType="SEQUENTIAL" lastOpened="2017-03-20T14:24:16.229+05:30" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.ProTestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="Export JUnit Results" value="true"/>
  <con:entry key="Export All" value="false"/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="TestSuite" value="periodictableSoap TestSuite"/>
  <con:entry key="Endpoint" value=""/>
  <con:entry key="Select Report Type" value="JUnit-Style HTML Report"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Run in-process" value="false"/>
  <con:entry key="Password" value=""/>
  <con:entry key="Print Report" value="true"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Test Case Tags" value=""/>
  <con:entry key="Export JUnit Results with test properties" value="true"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="TestCase" value="ElementSpecificRequests TestCase"/>
  <con:entry key="Username" value=""/>
  <con:entry key="user-settings.xml Password" value=""/>
  <con:entry key="TestRunner Path" value="C:\Program Files\SmartBear\ReadyAPI-1.9.0\bin"/>
  <con:entry key="Environment" value="Default environment"/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Enable UI" value="false"/>
  <con:entry key="Root Folder" value="C:\Users\616181\Downloads\SoapUI\Reports"/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Save Project" value="false"/>
</xml-fragment>]]></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.TestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Environment" value="Default"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="TestSuite" value="periodictableSoap_TestSuite"/>
  <con:entry key="Password" value=""/>
  <con:entry key="TestRunner Path" value="C:\Program Files (x86)\SmartBear\SoapUI-5.3.0\bin"/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="user-settings.xml Password" value=""/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Save Project" value="false"/>
  <con:entry key="Enable UI" value="false"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Export JUnit Results" value="true"/>
  <con:entry key="Export JUnit Results with test properties" value="true"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Export All" value="true"/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="TestCase" value="&lt;all>"/>
  <con:entry key="Print Report" value="true"/>
  <con:entry key="Username" value=""/>
  <con:entry key="Root Folder" value="C:\Users\616181\Downloads\SoapUI\Reports"/>
  <con:entry key="Select Report Type" value=""/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="Endpoint" value=""/>
</xml-fragment>]]></con:setting></con:settings><con:interface xsi:type="con:WsdlInterface" wsaVersion="NONE" name="periodictableSoap" type="wsdl" bindingName="{http://www.webserviceX.NET}periodictableSoap" soapVersion="1_1" anonymous="optional" definition="http://www.webservicex.net/periodictable.asmx?WSDL" id="9eeeb8b5-0627-4f19-8035-377a027d5e2e" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="http://www.webservicex.net/periodictable.asmx?WSDL"><con:part><con:url>http://www.webservicex.net/periodictable.asmx?WSDL</con:url><con:content><![CDATA[<wsdl:definitions targetNamespace="http://www.webserviceX.NET" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tm="http://microsoft.com/wsdl/mime/textMatching/" xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" xmlns:mime="http://schemas.xmlsoap.org/wsdl/mime/" xmlns:tns="http://www.webserviceX.NET" xmlns:s="http://www.w3.org/2001/XMLSchema" xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" xmlns:http="http://schemas.xmlsoap.org/wsdl/http/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
  <wsdl:types>
    <s:schema elementFormDefault="qualified" targetNamespace="http://www.webserviceX.NET">
      <s:element name="GetAtoms">
        <s:complexType/>
      </s:element>
      <s:element name="GetAtomsResponse">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="0" maxOccurs="1" name="GetAtomsResult" type="s:string"/>
          </s:sequence>
        </s:complexType>
      </s:element>
      <s:element name="GetAtomicWeight">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="0" maxOccurs="1" name="ElementName" type="s:string"/>
          </s:sequence>
        </s:complexType>
      </s:element>
      <s:element name="GetAtomicWeightResponse">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="0" maxOccurs="1" name="GetAtomicWeightResult" type="s:string"/>
          </s:sequence>
        </s:complexType>
      </s:element>
      <s:element name="GetAtomicNumber">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="0" maxOccurs="1" name="ElementName" type="s:string"/>
          </s:sequence>
        </s:complexType>
      </s:element>
      <s:element name="GetAtomicNumberResponse">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="0" maxOccurs="1" name="GetAtomicNumberResult" type="s:string"/>
          </s:sequence>
        </s:complexType>
      </s:element>
      <s:element name="GetElementSymbol">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="0" maxOccurs="1" name="ElementName" type="s:string"/>
          </s:sequence>
        </s:complexType>
      </s:element>
      <s:element name="GetElementSymbolResponse">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="0" maxOccurs="1" name="GetElementSymbolResult" type="s:string"/>
          </s:sequence>
        </s:complexType>
      </s:element>
      <s:element name="string" nillable="true" type="s:string"/>
    </s:schema>
  </wsdl:types>
  <wsdl:message name="GetAtomsSoapIn">
    <wsdl:part name="parameters" element="tns:GetAtoms"/>
  </wsdl:message>
  <wsdl:message name="GetAtomsSoapOut">
    <wsdl:part name="parameters" element="tns:GetAtomsResponse"/>
  </wsdl:message>
  <wsdl:message name="GetAtomicWeightSoapIn">
    <wsdl:part name="parameters" element="tns:GetAtomicWeight"/>
  </wsdl:message>
  <wsdl:message name="GetAtomicWeightSoapOut">
    <wsdl:part name="parameters" element="tns:GetAtomicWeightResponse"/>
  </wsdl:message>
  <wsdl:message name="GetAtomicNumberSoapIn">
    <wsdl:part name="parameters" element="tns:GetAtomicNumber"/>
  </wsdl:message>
  <wsdl:message name="GetAtomicNumberSoapOut">
    <wsdl:part name="parameters" element="tns:GetAtomicNumberResponse"/>
  </wsdl:message>
  <wsdl:message name="GetElementSymbolSoapIn">
    <wsdl:part name="parameters" element="tns:GetElementSymbol"/>
  </wsdl:message>
  <wsdl:message name="GetElementSymbolSoapOut">
    <wsdl:part name="parameters" element="tns:GetElementSymbolResponse"/>
  </wsdl:message>
  <wsdl:message name="GetAtomsHttpGetIn"/>
  <wsdl:message name="GetAtomsHttpGetOut">
    <wsdl:part name="Body" element="tns:string"/>
  </wsdl:message>
  <wsdl:message name="GetAtomicWeightHttpGetIn">
    <wsdl:part name="ElementName" type="s:string"/>
  </wsdl:message>
  <wsdl:message name="GetAtomicWeightHttpGetOut">
    <wsdl:part name="Body" element="tns:string"/>
  </wsdl:message>
  <wsdl:message name="GetAtomicNumberHttpGetIn">
    <wsdl:part name="ElementName" type="s:string"/>
  </wsdl:message>
  <wsdl:message name="GetAtomicNumberHttpGetOut">
    <wsdl:part name="Body" element="tns:string"/>
  </wsdl:message>
  <wsdl:message name="GetElementSymbolHttpGetIn">
    <wsdl:part name="ElementName" type="s:string"/>
  </wsdl:message>
  <wsdl:message name="GetElementSymbolHttpGetOut">
    <wsdl:part name="Body" element="tns:string"/>
  </wsdl:message>
  <wsdl:message name="GetAtomsHttpPostIn"/>
  <wsdl:message name="GetAtomsHttpPostOut">
    <wsdl:part name="Body" element="tns:string"/>
  </wsdl:message>
  <wsdl:message name="GetAtomicWeightHttpPostIn">
    <wsdl:part name="ElementName" type="s:string"/>
  </wsdl:message>
  <wsdl:message name="GetAtomicWeightHttpPostOut">
    <wsdl:part name="Body" element="tns:string"/>
  </wsdl:message>
  <wsdl:message name="GetAtomicNumberHttpPostIn">
    <wsdl:part name="ElementName" type="s:string"/>
  </wsdl:message>
  <wsdl:message name="GetAtomicNumberHttpPostOut">
    <wsdl:part name="Body" element="tns:string"/>
  </wsdl:message>
  <wsdl:message name="GetElementSymbolHttpPostIn">
    <wsdl:part name="ElementName" type="s:string"/>
  </wsdl:message>
  <wsdl:message name="GetElementSymbolHttpPostOut">
    <wsdl:part name="Body" element="tns:string"/>
  </wsdl:message>
  <wsdl:portType name="periodictableSoap">
    <wsdl:operation name="GetAtoms">
      <wsdl:documentation>Get element</wsdl:documentation>
      <wsdl:input message="tns:GetAtomsSoapIn"/>
      <wsdl:output message="tns:GetAtomsSoapOut"/>
    </wsdl:operation>
    <wsdl:operation name="GetAtomicWeight">
      <wsdl:documentation>Get atomic wieght by element name</wsdl:documentation>
      <wsdl:input message="tns:GetAtomicWeightSoapIn"/>
      <wsdl:output message="tns:GetAtomicWeightSoapOut"/>
    </wsdl:operation>
    <wsdl:operation name="GetAtomicNumber">
      <wsdl:documentation>Get atomic Number by element name</wsdl:documentation>
      <wsdl:input message="tns:GetAtomicNumberSoapIn"/>
      <wsdl:output message="tns:GetAtomicNumberSoapOut"/>
    </wsdl:operation>
    <wsdl:operation name="GetElementSymbol">
      <wsdl:documentation>Get atomic symbol by element name</wsdl:documentation>
      <wsdl:input message="tns:GetElementSymbolSoapIn"/>
      <wsdl:output message="tns:GetElementSymbolSoapOut"/>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:portType name="periodictableHttpGet">
    <wsdl:operation name="GetAtoms">
      <wsdl:documentation>Get element</wsdl:documentation>
      <wsdl:input message="tns:GetAtomsHttpGetIn"/>
      <wsdl:output message="tns:GetAtomsHttpGetOut"/>
    </wsdl:operation>
    <wsdl:operation name="GetAtomicWeight">
      <wsdl:documentation>Get atomic wieght by element name</wsdl:documentation>
      <wsdl:input message="tns:GetAtomicWeightHttpGetIn"/>
      <wsdl:output message="tns:GetAtomicWeightHttpGetOut"/>
    </wsdl:operation>
    <wsdl:operation name="GetAtomicNumber">
      <wsdl:documentation>Get atomic Number by element name</wsdl:documentation>
      <wsdl:input message="tns:GetAtomicNumberHttpGetIn"/>
      <wsdl:output message="tns:GetAtomicNumberHttpGetOut"/>
    </wsdl:operation>
    <wsdl:operation name="GetElementSymbol">
      <wsdl:documentation>Get atomic symbol by element name</wsdl:documentation>
      <wsdl:input message="tns:GetElementSymbolHttpGetIn"/>
      <wsdl:output message="tns:GetElementSymbolHttpGetOut"/>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:portType name="periodictableHttpPost">
    <wsdl:operation name="GetAtoms">
      <wsdl:documentation>Get element</wsdl:documentation>
      <wsdl:input message="tns:GetAtomsHttpPostIn"/>
      <wsdl:output message="tns:GetAtomsHttpPostOut"/>
    </wsdl:operation>
    <wsdl:operation name="GetAtomicWeight">
      <wsdl:documentation>Get atomic wieght by element name</wsdl:documentation>
      <wsdl:input message="tns:GetAtomicWeightHttpPostIn"/>
      <wsdl:output message="tns:GetAtomicWeightHttpPostOut"/>
    </wsdl:operation>
    <wsdl:operation name="GetAtomicNumber">
      <wsdl:documentation>Get atomic Number by element name</wsdl:documentation>
      <wsdl:input message="tns:GetAtomicNumberHttpPostIn"/>
      <wsdl:output message="tns:GetAtomicNumberHttpPostOut"/>
    </wsdl:operation>
    <wsdl:operation name="GetElementSymbol">
      <wsdl:documentation>Get atomic symbol by element name</wsdl:documentation>
      <wsdl:input message="tns:GetElementSymbolHttpPostIn"/>
      <wsdl:output message="tns:GetElementSymbolHttpPostOut"/>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="periodictableSoap" type="tns:periodictableSoap">
    <soap:binding transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="GetAtoms">
      <soap:operation soapAction="http://www.webserviceX.NET/GetAtoms" style="document"/>
      <wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetAtomicWeight">
      <soap:operation soapAction="http://www.webserviceX.NET/GetAtomicWeight" style="document"/>
      <wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetAtomicNumber">
      <soap:operation soapAction="http://www.webserviceX.NET/GetAtomicNumber" style="document"/>
      <wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetElementSymbol">
      <soap:operation soapAction="http://www.webserviceX.NET/GetElementSymbol" style="document"/>
      <wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:binding name="periodictableSoap12" type="tns:periodictableSoap">
    <soap12:binding transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="GetAtoms">
      <soap12:operation soapAction="http://www.webserviceX.NET/GetAtoms" style="document"/>
      <wsdl:input>
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap12:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetAtomicWeight">
      <soap12:operation soapAction="http://www.webserviceX.NET/GetAtomicWeight" style="document"/>
      <wsdl:input>
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap12:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetAtomicNumber">
      <soap12:operation soapAction="http://www.webserviceX.NET/GetAtomicNumber" style="document"/>
      <wsdl:input>
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap12:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetElementSymbol">
      <soap12:operation soapAction="http://www.webserviceX.NET/GetElementSymbol" style="document"/>
      <wsdl:input>
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap12:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:binding name="periodictableHttpGet" type="tns:periodictableHttpGet">
    <http:binding verb="GET"/>
    <wsdl:operation name="GetAtoms">
      <http:operation location="/GetAtoms"/>
      <wsdl:input>
        <http:urlEncoded/>
      </wsdl:input>
      <wsdl:output>
        <mime:mimeXml part="Body"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetAtomicWeight">
      <http:operation location="/GetAtomicWeight"/>
      <wsdl:input>
        <http:urlEncoded/>
      </wsdl:input>
      <wsdl:output>
        <mime:mimeXml part="Body"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetAtomicNumber">
      <http:operation location="/GetAtomicNumber"/>
      <wsdl:input>
        <http:urlEncoded/>
      </wsdl:input>
      <wsdl:output>
        <mime:mimeXml part="Body"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetElementSymbol">
      <http:operation location="/GetElementSymbol"/>
      <wsdl:input>
        <http:urlEncoded/>
      </wsdl:input>
      <wsdl:output>
        <mime:mimeXml part="Body"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:binding name="periodictableHttpPost" type="tns:periodictableHttpPost">
    <http:binding verb="POST"/>
    <wsdl:operation name="GetAtoms">
      <http:operation location="/GetAtoms"/>
      <wsdl:input>
        <mime:content type="application/x-www-form-urlencoded"/>
      </wsdl:input>
      <wsdl:output>
        <mime:mimeXml part="Body"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetAtomicWeight">
      <http:operation location="/GetAtomicWeight"/>
      <wsdl:input>
        <mime:content type="application/x-www-form-urlencoded"/>
      </wsdl:input>
      <wsdl:output>
        <mime:mimeXml part="Body"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetAtomicNumber">
      <http:operation location="/GetAtomicNumber"/>
      <wsdl:input>
        <mime:content type="application/x-www-form-urlencoded"/>
      </wsdl:input>
      <wsdl:output>
        <mime:mimeXml part="Body"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetElementSymbol">
      <http:operation location="/GetElementSymbol"/>
      <wsdl:input>
        <mime:content type="application/x-www-form-urlencoded"/>
      </wsdl:input>
      <wsdl:output>
        <mime:mimeXml part="Body"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="periodictable">
    <wsdl:port name="periodictableSoap" binding="tns:periodictableSoap">
      <soap:address location="http://www.webservicex.net/periodictable.asmx"/>
    </wsdl:port>
    <wsdl:port name="periodictableSoap12" binding="tns:periodictableSoap12">
      <soap12:address location="http://www.webservicex.net/periodictable.asmx"/>
    </wsdl:port>
    <wsdl:port name="periodictableHttpGet" binding="tns:periodictableHttpGet">
      <http:address location="http://www.webservicex.net/periodictable.asmx"/>
    </wsdl:port>
    <wsdl:port name="periodictableHttpPost" binding="tns:periodictableHttpPost">
      <http:address location="http://www.webservicex.net/periodictable.asmx"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://www.webservicex.net/periodictable.asmx</con:endpoint></con:endpoints><con:environmentSpec><con:entry environmentId="503910e8-b75b-4e88-a1ab-c21298ebca09"><con:authProfile>Inherit From Parent</con:authProfile></con:entry></con:environmentSpec><con:operation isOneWay="false" action="http://www.webserviceX.NET/GetAtomicNumber" name="GetAtomicNumber" bindingOperationName="GetAtomicNumber" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="51e2f2de-23da-4fd6-8692-0e7c25381a23"><con:settings/><con:call name="Request 1" id="cef956c2-d2da-47dc-9337-5f6989f0ba9e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://www.webservicex.net/periodictable.asmx</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:web="http://www.webserviceX.NET">
   <soapenv:Header/>
   <soapenv:Body>
      <web:GetAtomicNumber>
         <!--Optional:-->
         <web:ElementName>?</web:ElementName>
      </web:GetAtomicNumber>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.webserviceX.NET/GetAtomicNumber"/><con:wsrmConfig version="1.2"/><con:environmentSpec><con:entry environmentId="503910e8-b75b-4e88-a1ab-c21298ebca09"><con:authProfile>Inherit From Parent</con:authProfile></con:entry></con:environmentSpec></con:call><con:environmentSpec><con:entry environmentId="503910e8-b75b-4e88-a1ab-c21298ebca09"><con:authProfile>Inherit From Parent</con:authProfile></con:entry></con:environmentSpec></con:operation><con:operation isOneWay="false" action="http://www.webserviceX.NET/GetAtomicWeight" name="GetAtomicWeight" bindingOperationName="GetAtomicWeight" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="aec8bac2-e9c2-47af-8479-096a53c4f9de"><con:settings/><con:call name="Request 1" id="881fe5a4-c689-403f-8c6d-bf08a9905616"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://www.webservicex.net/periodictable.asmx</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:web="http://www.webserviceX.NET">
   <soapenv:Header/>
   <soapenv:Body>
      <web:GetAtomicWeight>
         <!--Optional:-->
         <web:ElementName>?</web:ElementName>
      </web:GetAtomicWeight>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.webserviceX.NET/GetAtomicWeight"/><con:wsrmConfig version="1.2"/><con:environmentSpec><con:entry environmentId="503910e8-b75b-4e88-a1ab-c21298ebca09"><con:authProfile>Inherit From Parent</con:authProfile></con:entry></con:environmentSpec></con:call><con:environmentSpec><con:entry environmentId="503910e8-b75b-4e88-a1ab-c21298ebca09"><con:authProfile>Inherit From Parent</con:authProfile></con:entry></con:environmentSpec></con:operation><con:operation isOneWay="false" action="http://www.webserviceX.NET/GetAtoms" name="GetAtoms" bindingOperationName="GetAtoms" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="0c8307a6-3982-49e1-8b15-cc115b0ca03d"><con:settings/><con:call name="Request 1" id="55d875fb-feb6-452b-aef4-65ef9f295bcb"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://www.webservicex.net/periodictable.asmx</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:web="http://www.webserviceX.NET">
   <soapenv:Header/>
   <soapenv:Body>
      <web:GetAtoms/>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.webserviceX.NET/GetAtoms"/><con:environmentSpec><con:entry environmentId="503910e8-b75b-4e88-a1ab-c21298ebca09"><con:authProfile>Inherit From Parent</con:authProfile></con:entry></con:environmentSpec></con:call><con:environmentSpec><con:entry environmentId="503910e8-b75b-4e88-a1ab-c21298ebca09"><con:authProfile>Inherit From Parent</con:authProfile></con:entry></con:environmentSpec></con:operation><con:operation isOneWay="false" action="http://www.webserviceX.NET/GetElementSymbol" name="GetElementSymbol" bindingOperationName="GetElementSymbol" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="ba7b5300-6922-4b15-b8a3-b0fe4c9e7a03"><con:settings/><con:call name="Request 1" id="58cc42cd-e867-40a1-8e87-711528853e36"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://www.webservicex.net/periodictable.asmx</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:web="http://www.webserviceX.NET">
   <soapenv:Header/>
   <soapenv:Body>
      <web:GetElementSymbol>
         <!--Optional:-->
         <web:ElementName>?</web:ElementName>
      </web:GetElementSymbol>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.webserviceX.NET/GetElementSymbol"/><con:wsrmConfig version="1.2"/><con:environmentSpec><con:entry environmentId="503910e8-b75b-4e88-a1ab-c21298ebca09"><con:authProfile>Inherit From Parent</con:authProfile></con:entry></con:environmentSpec></con:call><con:environmentSpec><con:entry environmentId="503910e8-b75b-4e88-a1ab-c21298ebca09"><con:authProfile>Inherit From Parent</con:authProfile></con:entry></con:environmentSpec></con:operation></con:interface><con:testSuite name="periodictableSoap_TestSuite" id="e6a374bc-aed0-4cfd-bc07-20c854911174"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ElementSpecificRequests_TestCase" searchProperties="true" id="6c6b808f-8466-4be2-992a-9a57274e5b9c" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="GetAtomicNumberDriverScript" id="a0b75c5a-1b4c-4643-b8e7-55f33621256a"><con:settings/><con:config><script>import jxl.*
import jxl.write.*

//calling step should be declared
def step = 3
def stepname = testRunner.testCase.getTestStepAt(step).getName()
def statuscolnum = 6

/* def  props = new Properties()
def propFile = new File("C:\\Users\\616181\\Downloads\\SoapUI\\Properties\\" + stepname + ".properties")
//load the properties files into properties object
props.load(propFile.newDataInputStream())
//loop thru the properties and set them at test case level
props.each {
  // context.testCase.testSuite.setPropertyValue(it.key, it.value.toString())
   testRunner.testCase.getTestStepByName("Properties").setPropertyValue(it.key, it.value.toString())
   sleep(500)
} */


Workbook wb = Workbook.getWorkbook(new File("C:\\Users\\616181\\Downloads\\SoapUI\\TestData\\" + stepname + ".xls")) 
Sheet sh = wb.getSheet(0)
row = sh.getRows()
 for (i=1;i&lt;row;i++)
{		
	//	testRunner.testCase.getTestStepByName("Properties").setPropertyValue(testRunner.testCase.getTestStepByName("Properties").getPropertyAt(0).getName() , sh.getCell(0,i).getContents()) 
	//	testRunner.testCase.getTestStepByName("Properties").setPropertyValue(testRunner.testCase.getTestStepByName("Properties").getPropertyAt(1).getName() , sh.getCell(1,i).getContents()) 
	//	testRunner.testCase.getTestStepByName("Properties").setPropertyValue(testRunner.testCase.getTestStepByName("Properties").getPropertyAt(2).getName() , sh.getCell(2,i).getContents()) 
	//	testRunner.testCase.getTestStepByName("Properties").setPropertyValue(testRunner.testCase.getTestStepByName("Properties").getPropertyAt(3).getName() , sh.getCell(3,i).getContents()) 
	//	testRunner.testCase.getTestStepByName("Properties").setPropertyValue(testRunner.testCase.getTestStepByName("Properties").getPropertyAt(4).getName() , sh.getCell(4,i).getContents()) 								

	if (sh.getCell(0,i).getContents() == "RUN") 	
	{
		def j = 1
		
		testRunner.testCase.getTestStepByName("Properties").setPropertyValue(sh.getCell(j,0).getContents() , sh.getCell(1,i).getContents()) 
		j++
		testRunner.testCase.getTestStepByName("Properties").setPropertyValue(sh.getCell(j,0).getContents() , sh.getCell(2,i).getContents()) 
		j++
		testRunner.testCase.getTestStepByName("Properties").setPropertyValue(sh.getCell(j,0).getContents() , sh.getCell(3,i).getContents()) 
		j++
		testRunner.testCase.getTestStepByName("Properties").setPropertyValue(sh.getCell(j,0).getContents() , sh.getCell(4,i).getContents()) 
		j++
		testRunner.testCase.getTestStepByName("Properties").setPropertyValue(sh.getCell(j,0).getContents() , sh.getCell(5,i).getContents()) 

		def status = null
		def now = new Date()
		def newdate=now.format("YYYY_MM_dd_hh_mm_ss_ms")
		def newdatefol=now.format("YYYY_MM_dd")
		
		// Create a File object representing the folder 'A/B'
		def resfolder = new File("C:\\Users\\616181\\Downloads\\SoapUI\\ResponseXML\\" + stepname + "_" + newdatefol)
		def resfoldername = testRunner.testCase.getTestStepAt(step).getName() + "_" + newdatefol
		// If it doesn't exist
		if( !resfolder.exists() ) {
		  // Create all folders up-to and including B
		  resfolder.mkdirs()
		}
		
		def inputFile = new File("C:\\Users\\616181\\Downloads\\SoapUI\\ResponseXML\\" + resfoldername + "\\" + stepname + "_" + "Iteration_" + i + "_" + newdate + ".xml")
		inputFile.write(testRunner.runTestStepByName(testRunner.testCase.getTestStepAt(step).getName()).getResponseContentAsXml())
		sleep(500)
		
		// Create a File object representing the folder 'A/B'
		def assfolder = new File("C:\\Users\\616181\\Downloads\\SoapUI\\Assertion\\" + stepname + "_" + newdatefol)
		def assfoldername = testRunner.testCase.getTestStepAt(step).getName() + "_" + newdatefol
		// If it doesn't exist
		if( !assfolder.exists() ) {
		  // Create all folders up-to and including B
		  assfolder.mkdirs()
		}
		
		def assertion = new File("C:\\Users\\616181\\Downloads\\SoapUI\\Assertion\\" + assfoldername + "\\" + stepname + "_" + "Iteration_" + i + "_" + newdate + ".txt")		
		
		
		for (e in testRunner.testCase.getTestStepAt(step).getAssertionList())
		{			
		assertion.append( e.getName() + " = " + e.getStatus()+ ";")
		if (e.getStatus().toString() != "VALID")
		{
		 status = "FAIL"
		 sleep(500)
		}
		}
		
		if (status == "FAIL")
		{	        
			Workbook existingWorkbook = Workbook.getWorkbook(new File("C:\\Users\\616181\\Downloads\\SoapUI\\TestData\\" + stepname + ".xls")) 
			WritableWorkbook workbookCopy = Workbook.createWorkbook(new File("C:\\Users\\616181\\Downloads\\SoapUI\\TestData\\" + stepname + ".xls"), existingWorkbook)
			WritableSheet sheetToEdit = workbookCopy.getSheet("TestData")
			WritableCellFormat newFormat = new WritableCellFormat()
			newFormat.setBackground(Colour.RED)
			Label label = new Label (statuscolnum, i, status, newFormat)
			//Add the created Cells to the sheet
			sheetToEdit.addCell(label)
			//Write and close the workbook
			workbookCopy.write()
			workbookCopy.close()
		 
		
		}
		else
		{
			status = "PASS"	        
			Workbook existingWorkbook = Workbook.getWorkbook(new File("C:\\Users\\616181\\Downloads\\SoapUI\\TestData\\" + stepname + ".xls"))
			WritableWorkbook workbookCopy = Workbook.createWorkbook(new File("C:\\Users\\616181\\Downloads\\SoapUI\\TestData\\" + stepname + ".xls"), existingWorkbook)
			WritableSheet sheetToEdit = workbookCopy.getSheet("TestData")
			WritableCellFormat newFormat = new WritableCellFormat()
			newFormat.setBackground(Colour.GREEN)
			Label label = new Label (statuscolnum, i, status,newFormat)
			//Add the created Cells to the sheet
			sheetToEdit.addCell(label)
			//Write and close the workbook
			workbookCopy.write()
			workbookCopy.close()
		}
	}
} 
</script></con:config></con:testStep><con:testStep type="groovy" name="GetAtomicWeightDriverScript" id="39dced6b-54c6-4c24-a959-21451dbfd20c"><con:settings/><con:config><script>import jxl.*
import jxl.write.*

//calling step should be declared
def step = 4
def stepname = testRunner.testCase.getTestStepAt(step).getName()
def statuscolnum = 6

/* def  props = new Properties()
def propFile = new File("C:\\Users\\616181\\Downloads\\SoapUI\\Properties\\" + stepname + ".properties")
//load the properties files into properties object
props.load(propFile.newDataInputStream())
//loop thru the properties and set them at test case level
props.each {
  // context.testCase.testSuite.setPropertyValue(it.key, it.value.toString())
   testRunner.testCase.getTestStepByName("Properties").setPropertyValue(it.key, it.value.toString())
   sleep(500)
} */


Workbook wb = Workbook.getWorkbook(new File("C:\\Users\\616181\\Downloads\\SoapUI\\TestData\\" + stepname + ".xls")) 
Sheet sh = wb.getSheet(0)
row = sh.getRows()
 for (i=1;i&lt;row;i++)
{		
	//	testRunner.testCase.getTestStepByName("Properties").setPropertyValue(testRunner.testCase.getTestStepByName("Properties").getPropertyAt(0).getName() , sh.getCell(0,i).getContents()) 
	//	testRunner.testCase.getTestStepByName("Properties").setPropertyValue(testRunner.testCase.getTestStepByName("Properties").getPropertyAt(1).getName() , sh.getCell(1,i).getContents()) 
	//	testRunner.testCase.getTestStepByName("Properties").setPropertyValue(testRunner.testCase.getTestStepByName("Properties").getPropertyAt(2).getName() , sh.getCell(2,i).getContents()) 
	//	testRunner.testCase.getTestStepByName("Properties").setPropertyValue(testRunner.testCase.getTestStepByName("Properties").getPropertyAt(3).getName() , sh.getCell(3,i).getContents()) 
	//	testRunner.testCase.getTestStepByName("Properties").setPropertyValue(testRunner.testCase.getTestStepByName("Properties").getPropertyAt(4).getName() , sh.getCell(4,i).getContents()) 								

	if (sh.getCell(0,i).getContents() == "RUN") 	
	{
		def j = 1
		
		testRunner.testCase.getTestStepByName("Properties").setPropertyValue(sh.getCell(j,0).getContents() , sh.getCell(1,i).getContents()) 
		j++
		testRunner.testCase.getTestStepByName("Properties").setPropertyValue(sh.getCell(j,0).getContents() , sh.getCell(2,i).getContents()) 
		j++
		testRunner.testCase.getTestStepByName("Properties").setPropertyValue(sh.getCell(j,0).getContents() , sh.getCell(3,i).getContents()) 
		j++
		testRunner.testCase.getTestStepByName("Properties").setPropertyValue(sh.getCell(j,0).getContents() , sh.getCell(4,i).getContents()) 
		j++
		testRunner.testCase.getTestStepByName("Properties").setPropertyValue(sh.getCell(j,0).getContents() , sh.getCell(5,i).getContents()) 

		def status = null
		def now = new Date()
		def newdate=now.format("YYYY_MM_dd_hh_mm_ss_ms")
		def newdatefol=now.format("YYYY_MM_dd")
		
		// Create a File object representing the folder 'A/B'
		def resfolder = new File("C:\\Users\\616181\\Downloads\\SoapUI\\ResponseXML\\" + stepname + "_" + newdatefol)
		def resfoldername = testRunner.testCase.getTestStepAt(step).getName() + "_" + newdatefol
		// If it doesn't exist
		if( !resfolder.exists() ) {
		  // Create all folders up-to and including B
		  resfolder.mkdirs()
		}
		
		def inputFile = new File("C:\\Users\\616181\\Downloads\\SoapUI\\ResponseXML\\" + resfoldername + "\\" + stepname + "_" + "Iteration_" + i + "_" + newdate + ".xml")
		inputFile.write(testRunner.runTestStepByName(testRunner.testCase.getTestStepAt(step).getName()).getResponseContentAsXml())
		sleep(500)
		
		// Create a File object representing the folder 'A/B'
		def assfolder = new File("C:\\Users\\616181\\Downloads\\SoapUI\\Assertion\\" + stepname + "_" + newdatefol)
		def assfoldername = testRunner.testCase.getTestStepAt(step).getName() + "_" + newdatefol
		// If it doesn't exist
		if( !assfolder.exists() ) {
		  // Create all folders up-to and including B
		  assfolder.mkdirs()
		}
		
		def assertion = new File("C:\\Users\\616181\\Downloads\\SoapUI\\Assertion\\" + assfoldername + "\\" + stepname + "_" + "Iteration_" + i + "_" + newdate + ".txt")		
		
		
		for (e in testRunner.testCase.getTestStepAt(step).getAssertionList())
		{			
		assertion.append( e.getName() + " = " + e.getStatus()+ ";")
		if (e.getStatus().toString() != "VALID")
		{
		 status = "FAIL"
		 sleep(500)
		}
		}
		
		if (status == "FAIL")
		{	        
			Workbook existingWorkbook = Workbook.getWorkbook(new File("C:\\Users\\616181\\Downloads\\SoapUI\\TestData\\" + stepname + ".xls")) 
			WritableWorkbook workbookCopy = Workbook.createWorkbook(new File("C:\\Users\\616181\\Downloads\\SoapUI\\TestData\\" + stepname + ".xls"), existingWorkbook)
			WritableSheet sheetToEdit = workbookCopy.getSheet("TestData")
			WritableCellFormat newFormat = new WritableCellFormat()
			newFormat.setBackground(Colour.RED)
			Label label = new Label (statuscolnum, i, status, newFormat)
			//Add the created Cells to the sheet
			sheetToEdit.addCell(label)
			//Write and close the workbook
			workbookCopy.write()
			workbookCopy.close()
		 
		
		}
		else
		{
			status = "PASS"	        
			Workbook existingWorkbook = Workbook.getWorkbook(new File("C:\\Users\\616181\\Downloads\\SoapUI\\TestData\\" + stepname + ".xls"))
			WritableWorkbook workbookCopy = Workbook.createWorkbook(new File("C:\\Users\\616181\\Downloads\\SoapUI\\TestData\\" + stepname + ".xls"), existingWorkbook)
			WritableSheet sheetToEdit = workbookCopy.getSheet("TestData")
			WritableCellFormat newFormat = new WritableCellFormat()
			newFormat.setBackground(Colour.GREEN)
			Label label = new Label (statuscolnum, i, status,newFormat)
			//Add the created Cells to the sheet
			sheetToEdit.addCell(label)
			//Write and close the workbook
			workbookCopy.write()
			workbookCopy.close()
		}
	}
} 
</script></con:config></con:testStep><con:testStep type="groovy" name="GetElementSymbolDriverScript" id="353f0cb5-6821-4c34-831b-6c9eccff2031"><con:settings/><con:config><script>import jxl.*
import jxl.write.*

//calling step should be declared
def step = 5
def stepname = testRunner.testCase.getTestStepAt(step).getName()
def statuscolnum = 6

/* def  props = new Properties()
def propFile = new File("C:\\Users\\616181\\Downloads\\SoapUI\\Properties\\" + stepname + ".properties")
//load the properties files into properties object
props.load(propFile.newDataInputStream())
//loop thru the properties and set them at test case level
props.each {
  // context.testCase.testSuite.setPropertyValue(it.key, it.value.toString())
   testRunner.testCase.getTestStepByName("Properties").setPropertyValue(it.key, it.value.toString())
   sleep(500)
} */


Workbook wb = Workbook.getWorkbook(new File("C:\\Users\\616181\\Downloads\\SoapUI\\TestData\\" + stepname + ".xls")) 
Sheet sh = wb.getSheet(0)
row = sh.getRows()
 for (i=1;i&lt;row;i++)
{		
	//	testRunner.testCase.getTestStepByName("Properties").setPropertyValue(testRunner.testCase.getTestStepByName("Properties").getPropertyAt(0).getName() , sh.getCell(0,i).getContents()) 
	//	testRunner.testCase.getTestStepByName("Properties").setPropertyValue(testRunner.testCase.getTestStepByName("Properties").getPropertyAt(1).getName() , sh.getCell(1,i).getContents()) 
	//	testRunner.testCase.getTestStepByName("Properties").setPropertyValue(testRunner.testCase.getTestStepByName("Properties").getPropertyAt(2).getName() , sh.getCell(2,i).getContents()) 
	//	testRunner.testCase.getTestStepByName("Properties").setPropertyValue(testRunner.testCase.getTestStepByName("Properties").getPropertyAt(3).getName() , sh.getCell(3,i).getContents()) 
	//	testRunner.testCase.getTestStepByName("Properties").setPropertyValue(testRunner.testCase.getTestStepByName("Properties").getPropertyAt(4).getName() , sh.getCell(4,i).getContents()) 								

	if (sh.getCell(0,i).getContents() == "RUN") 	
	{
		def j = 1
		
		testRunner.testCase.getTestStepByName("Properties").setPropertyValue(sh.getCell(j,0).getContents() , sh.getCell(1,i).getContents()) 
		j++
		testRunner.testCase.getTestStepByName("Properties").setPropertyValue(sh.getCell(j,0).getContents() , sh.getCell(2,i).getContents()) 
		j++
		testRunner.testCase.getTestStepByName("Properties").setPropertyValue(sh.getCell(j,0).getContents() , sh.getCell(3,i).getContents()) 
		j++
		testRunner.testCase.getTestStepByName("Properties").setPropertyValue(sh.getCell(j,0).getContents() , sh.getCell(4,i).getContents()) 
		j++
		testRunner.testCase.getTestStepByName("Properties").setPropertyValue(sh.getCell(j,0).getContents() , sh.getCell(5,i).getContents()) 

		def status = null
		def now = new Date()
		def newdate=now.format("YYYY_MM_dd_hh_mm_ss_ms")
		def newdatefol=now.format("YYYY_MM_dd")
		
		// Create a File object representing the folder 'A/B'
		def resfolder = new File("C:\\Users\\616181\\Downloads\\SoapUI\\ResponseXML\\" + stepname + "_" + newdatefol)
		def resfoldername = testRunner.testCase.getTestStepAt(step).getName() + "_" + newdatefol
		// If it doesn't exist
		if( !resfolder.exists() ) {
		  // Create all folders up-to and including B
		  resfolder.mkdirs()
		}
		
		def inputFile = new File("C:\\Users\\616181\\Downloads\\SoapUI\\ResponseXML\\" + resfoldername + "\\" + stepname + "_" + "Iteration_" + i + "_" + newdate + ".xml")
		inputFile.write(testRunner.runTestStepByName(testRunner.testCase.getTestStepAt(step).getName()).getResponseContentAsXml())
		sleep(500)
		
		// Create a File object representing the folder 'A/B'
		def assfolder = new File("C:\\Users\\616181\\Downloads\\SoapUI\\Assertion\\" + stepname + "_" + newdatefol)
		def assfoldername = testRunner.testCase.getTestStepAt(step).getName() + "_" + newdatefol
		// If it doesn't exist
		if( !assfolder.exists() ) {
		  // Create all folders up-to and including B
		  assfolder.mkdirs()
		}
		
		def assertion = new File("C:\\Users\\616181\\Downloads\\SoapUI\\Assertion\\" + assfoldername + "\\" + stepname + "_" + "Iteration_" + i + "_" + newdate + ".txt")		
		
		
		for (e in testRunner.testCase.getTestStepAt(step).getAssertionList())
		{			
		assertion.append( e.getName() + " = " + e.getStatus()+ ";")
		if (e.getStatus().toString() != "VALID")
		{
		 status = "FAIL"
		 sleep(500)
		}
		}
		
		if (status == "FAIL")
		{	        
			Workbook existingWorkbook = Workbook.getWorkbook(new File("C:\\Users\\616181\\Downloads\\SoapUI\\TestData\\" + stepname + ".xls")) 
			WritableWorkbook workbookCopy = Workbook.createWorkbook(new File("C:\\Users\\616181\\Downloads\\SoapUI\\TestData\\" + stepname + ".xls"), existingWorkbook)
			WritableSheet sheetToEdit = workbookCopy.getSheet("TestData")
			WritableCellFormat newFormat = new WritableCellFormat()
			newFormat.setBackground(Colour.RED)
			Label label = new Label (statuscolnum, i, status, newFormat)
			//Add the created Cells to the sheet
			sheetToEdit.addCell(label)
			//Write and close the workbook
			workbookCopy.write()
			workbookCopy.close()
		 
		
		}
		else
		{
			status = "PASS"	        
			Workbook existingWorkbook = Workbook.getWorkbook(new File("C:\\Users\\616181\\Downloads\\SoapUI\\TestData\\" + stepname + ".xls"))
			WritableWorkbook workbookCopy = Workbook.createWorkbook(new File("C:\\Users\\616181\\Downloads\\SoapUI\\TestData\\" + stepname + ".xls"), existingWorkbook)
			WritableSheet sheetToEdit = workbookCopy.getSheet("TestData")
			WritableCellFormat newFormat = new WritableCellFormat()
			newFormat.setBackground(Colour.GREEN)
			Label label = new Label (statuscolnum, i, status,newFormat)
			//Add the created Cells to the sheet
			sheetToEdit.addCell(label)
			//Write and close the workbook
			workbookCopy.write()
			workbookCopy.close()
		}
	}
} 
</script></con:config></con:testStep><con:testStep type="request" name="GetAtomicNumber" id="d23e65f0-f1b7-48f9-bb6e-f66c75ea55e4"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>periodictableSoap</con:interface><con:operation>GetAtomicNumber</con:operation><con:request name="GetAtomicNumber" id="ffc1d068-32d9-4732-aee7-2c9d7a4f0354"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#Endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:web="http://www.webserviceX.NET">
   <soapenv:Header/>
   <soapenv:Body>
      <web:GetAtomicNumber>
         <!--Optional:-->
         <web:ElementName>${Properties#ElName}</web:ElementName>
      </web:GetAtomicNumber>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="Response SLA Assertion" name="Response SLA" id="a6b64652-22fe-4a23-8537-ebabdbef866d"><con:configuration><SLA>1000</SLA></con:configuration></con:assertion><con:assertion type="SOAP Fault Assertion" name="Not SOAP Fault" id="ec685704-b1c2-4b4b-a0fc-fa6908757279"/><con:assertion type="Simple Contains" name="Contains Valid AtomicNumber" id="857ab006-f4c3-48e7-939c-2c5bcee4a23b"><con:configuration><token>&lt;AtomicNumber>${Properties#AtNum}&lt;/AtomicNumber></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" name="Contains Valid ElementName" id="2449cc78-93d7-4473-a790-df5e3d5e4baa"><con:configuration><token>&lt;ElementName>${Properties#ElName}&lt;/ElementName></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" name="Contains Valid Symbol" id="d674fe52-ad38-49c8-b7aa-b3d05d0c08f4"><con:configuration><token>&lt;Symbol>${Properties#Symbol}&lt;/Symbol></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" name="Contains Valid AtomicWeight" id="b3fae52a-e7e3-4959-9679-47560c4318a9"><con:configuration><token>&lt;AtomicWeight>${Properties#AtWeight}&lt;/AtomicWeight></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" name="Contains Valid BoilingPoint" id="ed9a6d58-9350-4613-881a-55a8f8fb5f73"><con:configuration><token>&lt;BoilingPoint>${Properties#BoilPoint}&lt;/BoilingPoint></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig action="http://www.webserviceX.NET/GetAtomicNumber" mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/><con:environmentSpec><con:entry environmentId="503910e8-b75b-4e88-a1ab-c21298ebca09"><con:authProfile>Inherit From Parent</con:authProfile></con:entry></con:environmentSpec></con:request></con:config></con:testStep><con:testStep type="request" name="GetAtomicWeight" id="23a32d9d-b256-49eb-b9fe-a2944c7dd97b"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>periodictableSoap</con:interface><con:operation>GetAtomicWeight</con:operation><con:request name="GetAtomicWeight" id="ae1efb77-463e-4f52-b243-a04bb967602f"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#Endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:web="http://www.webserviceX.NET">
   <soapenv:Header/>
   <soapenv:Body>
      <web:GetAtomicWeight>
         <!--Optional:-->
         <web:ElementName>${Properties#ElName}</web:ElementName>
      </web:GetAtomicWeight>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="Response SLA Assertion" name="Response SLA" id="bbf98807-68c0-4997-a9df-87e8e8ee0f5e"><con:configuration><SLA>10000</SLA></con:configuration></con:assertion><con:assertion type="SOAP Fault Assertion" name="Not SOAP Fault" id="8e7d2f79-5370-4b65-b82a-c0893d9eb7c7"/><con:assertion type="Simple Contains" name="Contains" id="85c01a05-7274-441b-872e-70484b9a73fd"><con:configuration><token>&lt;AtomicWeight>${Properties#AtWeight}&lt;/AtomicWeight></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="65e3bda3-83e5-4bd1-a9f6-9c954bb3ef9f" name="Valid HTTP Status Codes"><con:settings/><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig action="http://www.webserviceX.NET/GetAtomicWeight" mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/><con:environmentSpec><con:entry environmentId="503910e8-b75b-4e88-a1ab-c21298ebca09"><con:authProfile>Inherit From Parent</con:authProfile></con:entry></con:environmentSpec></con:request></con:config></con:testStep><con:testStep type="request" name="GetElementSymbol" id="9482b161-43d5-4481-ae98-4b84781656b0"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>periodictableSoap</con:interface><con:operation>GetElementSymbol</con:operation><con:request name="GetElementSymbol" id="0686f8b9-3278-48ae-b607-b03ed17464ae"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#Endpoint}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:web="http://www.webserviceX.NET">
   <soapenv:Header/>
   <soapenv:Body>
      <web:GetElementSymbol>
         <!--Optional:-->
         <web:ElementName>${Properties#ElName}</web:ElementName>
      </web:GetElementSymbol>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="Response SLA Assertion" name="Response SLA" id="af9e56e9-8e5d-41b9-a4c2-3693f924123e"><con:configuration><SLA>10000</SLA></con:configuration></con:assertion><con:assertion type="SOAP Fault Assertion" name="Not SOAP Fault" id="4c6f49d0-1c55-4597-a921-d6e6fef72653"/><con:assertion type="Simple Contains" name="Contains" id="25087c90-75c6-491b-b1a5-5eb6f0efdb4c"><con:configuration><token>&lt;Symbol>${Properties#Symbol}&lt;/Symbol></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig action="http://www.webserviceX.NET/GetElementSymbol" mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/><con:environmentSpec><con:entry environmentId="503910e8-b75b-4e88-a1ab-c21298ebca09"><con:authProfile>Inherit From Parent</con:authProfile></con:entry></con:environmentSpec></con:request></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script1" id="7bcfbd8f-85ad-4239-a949-3cfed0a3bc3d" disabled="true"><con:settings/><con:config><script>/**
 * this method imports properties to a test case from a file.
 * @param context
 * @param filePath
 */
//def importPropertiesToTestCase(def context,String filePath) {
    def  props = new Properties()
    def propFile = new File("C:\\Users\\616181\\Downloads\\SoapUI\\Properties\\GetAtomicNumber.properties")
    //load the properties files into properties object
    props.load(propFile.newDataInputStream())
    //loop thru the properties and set them at test case level
    props.each {
       context.testCase.testSuite.setPropertyValue(it.key, it.value.toString())
      //  testRunner.testCase.getTestStepByName("Properties").setPropertyValue(it.key, it.value.toString())
    }
//}
//How to use above method. Make sure you have file with properties, change path if needed.
//importPropertiesToTestCase(context, 'C:/Users/616181/Downloads/SoapUI/Properties/googleapi.properties')</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script" id="157c5c71-f731-43b6-8211-397c550be075" disabled="true"><con:settings/><con:config><script>
def  props = new Properties()
def propFile = new File("C:\\Users\\616181\\Downloads\\SoapUI\\Properties\\GetAtomicNumber.properties")
//load the properties files into properties object
props.load(propFile.newDataInputStream())
//loop thru the properties and set them at test case level
props.each {
  // context.testCase.testSuite.setPropertyValue(it.key, it.value.toString())
   testRunner.testCase.getTestStepByName("Properties").setPropertyValue(it.key, it.value)
   sleep(500)
}</script></con:config></con:testStep><con:testStep type="properties" name="Properties" id="79fca611-d051-4cf6-9deb-bcd93a5f656d"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>ElName</con:name><con:value>Uranium</con:value></con:property><con:property><con:name>AtNum</con:name><con:value>92</con:value></con:property><con:property><con:name>Symbol</con:name><con:value>U</con:value></con:property><con:property><con:name>AtWeight</con:name><con:value>238.03</con:value></con:property><con:property><con:name>BoilPoint</con:name><con:value>4091</con:value></con:property></con:properties></con:config></con:testStep><con:setupScript/><con:tearDownScript/><con:properties><con:property><con:name>address</con:name><con:value>600063</con:value></con:property><con:property><con:name>longterm</con:name><con:value>600063</con:value></con:property><con:property><con:name>sensor</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>2c5e84b7-99e5-475a-a3a7-3d154331a608</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1f1dec3d-d5d0-4cd6-abe5-664a57c275d8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1107ed77-44ff-4e67-8e96-420def63b11f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:environmentSpec><con:entry environmentId="503910e8-b75b-4e88-a1ab-c21298ebca09"><con:authProfile>Inherit From Parent</con:authProfile></con:entry></con:environmentSpec></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetAtoms_TestCase" searchProperties="true" id="21f1f7e3-7028-4b44-bf1e-e858b492c1f6"><con:settings/><con:testStep type="groovy" name="GetAtomsDriverScript" id="dac3069f-b208-430a-bedd-c54450a69902"><con:settings/><con:config><script>import jxl.*
import jxl.write.*

//calling step should be declared
def step = 1
def PropStepNo = 2
def stepname = testRunner.testCase.getTestStepAt(step).getName()
def statuscolnum = 6

/* def  props = new Properties()
def propFile = new File("C:\\Users\\616181\\Downloads\\SoapUI\\Properties\\" + stepname + ".properties")
//load the properties files into properties object
props.load(propFile.newDataInputStream())
//loop thru the properties and set them at test case level
props.each {
  // context.testCase.testSuite.setPropertyValue(it.key, it.value.toString())
   testRunner.testCase.getTestStepByName("Properties").setPropertyValue(it.key, it.value.toString())
   sleep(500)
} */


Workbook wb = Workbook.getWorkbook(new File("C:\\Users\\616181\\Downloads\\SoapUI\\TestData\\" + stepname + ".xls")) 
Sheet sh = wb.getSheet(0)
row = sh.getRows()
 for (i=1;i&lt;row;i++)
{		
	//	testRunner.testCase.getTestStepByName("Properties").setPropertyValue(testRunner.testCase.getTestStepByName("Properties").getPropertyAt(0).getName() , sh.getCell(0,i).getContents()) 
	//	testRunner.testCase.getTestStepByName("Properties").setPropertyValue(testRunner.testCase.getTestStepByName("Properties").getPropertyAt(1).getName() , sh.getCell(1,i).getContents()) 
	//	testRunner.testCase.getTestStepByName("Properties").setPropertyValue(testRunner.testCase.getTestStepByName("Properties").getPropertyAt(2).getName() , sh.getCell(2,i).getContents()) 
	//	testRunner.testCase.getTestStepByName("Properties").setPropertyValue(testRunner.testCase.getTestStepByName("Properties").getPropertyAt(3).getName() , sh.getCell(3,i).getContents()) 
	//	testRunner.testCase.getTestStepByName("Properties").setPropertyValue(testRunner.testCase.getTestStepByName("Properties").getPropertyAt(4).getName() , sh.getCell(4,i).getContents()) 								

	if (sh.getCell(0,i).getContents() == "RUN") 	
	{
		def j = 1
		
		testRunner.testCase.getTestStepAt(PropStepNo).setPropertyValue(sh.getCell(j,0).getContents() , sh.getCell(1,i).getContents()) 
		j++
		testRunner.testCase.getTestStepAt(PropStepNo).setPropertyValue(sh.getCell(j,0).getContents() , sh.getCell(2,i).getContents())  

		def status = null
		def now = new Date()
		def newdate=now.format("YYYY_MM_dd_hh_mm_ss_ms")
		def newdatefol=now.format("YYYY_MM_dd")
		
		// Create a File object representing the folder 'A/B'
		def resfolder = new File("C:\\Users\\616181\\Downloads\\SoapUI\\ResponseXML\\" + stepname + "_" + newdatefol)
		def resfoldername = testRunner.testCase.getTestStepAt(step).getName() + "_" + newdatefol
		// If it doesn't exist
		if( !resfolder.exists() ) {
		  // Create all folders up-to and including B
		  resfolder.mkdirs()
		}
		
		def inputFile = new File("C:\\Users\\616181\\Downloads\\SoapUI\\ResponseXML\\" + resfoldername + "\\" + stepname + "_" + "Iteration_" + i + "_" + newdate + ".xml")
		inputFile.write(testRunner.runTestStepByName(testRunner.testCase.getTestStepAt(step).getName()).getResponseContentAsXml())
		sleep(500)
		
		// Create a File object representing the folder 'A/B'
		def assfolder = new File("C:\\Users\\616181\\Downloads\\SoapUI\\Assertion\\" + stepname + "_" + newdatefol)
		def assfoldername = testRunner.testCase.getTestStepAt(step).getName() + "_" + newdatefol
		// If it doesn't exist
		if( !assfolder.exists() ) {
		  // Create all folders up-to and including B
		  assfolder.mkdirs()
		}
		
		def assertion = new File("C:\\Users\\616181\\Downloads\\SoapUI\\Assertion\\" + assfoldername + "\\" + stepname + "_" + "Iteration_" + i + "_" + newdate + ".txt")		
		
		
		for (e in testRunner.testCase.getTestStepAt(step).getAssertionList())
		{			
		assertion.append( e.getName() + " = " + e.getStatus()+ ";")
		if (e.getStatus().toString() != "VALID")
		{
		 status = "FAIL"
		 sleep(500)
		}
		}
		
		if (status == "FAIL")
		{	        
			Workbook existingWorkbook = Workbook.getWorkbook(new File("C:\\Users\\616181\\Downloads\\SoapUI\\TestData\\" + stepname + ".xls")) 
			WritableWorkbook workbookCopy = Workbook.createWorkbook(new File("C:\\Users\\616181\\Downloads\\SoapUI\\TestData\\" + stepname + ".xls"), existingWorkbook)
			WritableSheet sheetToEdit = workbookCopy.getSheet("TestData")
			WritableCellFormat newFormat = new WritableCellFormat()
			newFormat.setBackground(Colour.RED)
			Label label = new Label (statuscolnum, i, status, newFormat)
			//Add the created Cells to the sheet
			sheetToEdit.addCell(label)
			//Write and close the workbook
			workbookCopy.write()
			workbookCopy.close()
		 
		
		}
		else
		{
			status = "PASS"	        
			Workbook existingWorkbook = Workbook.getWorkbook(new File("C:\\Users\\616181\\Downloads\\SoapUI\\TestData\\" + stepname + ".xls"))
			WritableWorkbook workbookCopy = Workbook.createWorkbook(new File("C:\\Users\\616181\\Downloads\\SoapUI\\TestData\\" + stepname + ".xls"), existingWorkbook)
			WritableSheet sheetToEdit = workbookCopy.getSheet("TestData")
			WritableCellFormat newFormat = new WritableCellFormat()
			newFormat.setBackground(Colour.GREEN)
			Label label = new Label (statuscolnum, i, status,newFormat)
			//Add the created Cells to the sheet
			sheetToEdit.addCell(label)
			//Write and close the workbook
			workbookCopy.write()
			workbookCopy.close()
		}
	}
} 
</script></con:config></con:testStep><con:testStep type="request" name="GetAtoms" id="731215f9-5f55-4751-858b-28eb1513da4e"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>periodictableSoap</con:interface><con:operation>GetAtoms</con:operation><con:request name="GetAtoms" id="fba74fb1-cb96-4fe1-b005-2c5de2aad9af"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://www.webservicex.net/periodictable.asmx</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:web="http://www.webserviceX.NET">
   <soapenv:Header/>
   <soapenv:Body>
      <web:GetAtoms/>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="Response SLA Assertion" name="Response SLA" id="fdf3e491-34da-4fba-b784-7b0e395d55c4"><con:configuration><SLA>10000</SLA></con:configuration></con:assertion><con:assertion type="SOAP Fault Assertion" name="Not SOAP Fault" id="537231cb-ef91-465d-996b-005d0575fe91"/><con:assertion type="XPath Match" name="XPath Match" id="abf7d9e6-acdb-4f11-8f09-f1294e0b5b4d"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns1='http://www.webserviceX.NET';
//ns1:GetAtomsResponse</path><content><![CDATA[<GetAtomsResponse xmlns="http://www.webserviceX.NET" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <GetAtomsResult><![CDATA[<NewDataSet>
  <Table>
    <ElementName>Actinium</ElementName>
  </Table>
  <Table>
    <ElementName>Aluminium</ElementName>
  </Table>
  <Table>
    <ElementName>Americium</ElementName>
  </Table>
  <Table>
    <ElementName>Antimony</ElementName>
  </Table>
  <Table>
    <ElementName>Argon</ElementName>
  </Table>
  <Table>
    <ElementName>Arsenic</ElementName>
  </Table>
  <Table>
    <ElementName>Astatine</ElementName>
  </Table>
  <Table>
    <ElementName>Barium</ElementName>
  </Table>
  <Table>
    <ElementName>Berkelium</ElementName>
  </Table>
  <Table>
    <ElementName>Beryllium</ElementName>
  </Table>
  <Table>
    <ElementName>Bismuth</ElementName>
  </Table>
  <Table>
    <ElementName>Bohrium</ElementName>
  </Table>
  <Table>
    <ElementName>Boron</ElementName>
  </Table>
  <Table>
    <ElementName>Bromine</ElementName>
  </Table>
  <Table>
    <ElementName>Cadmium</ElementName>
  </Table>
  <Table>
    <ElementName>Calcium</ElementName>
  </Table>
  <Table>
    <ElementName>Californium</ElementName>
  </Table>
  <Table>
    <ElementName>Carbon</ElementName>
  </Table>
  <Table>
    <ElementName>Cerium</ElementName>
  </Table>
  <Table>
    <ElementName>Cesium</ElementName>
  </Table>
  <Table>
    <ElementName>Chlorine</ElementName>
  </Table>
  <Table>
    <ElementName>Chromium</ElementName>
  </Table>
  <Table>
    <ElementName>Cobalt</ElementName>
  </Table>
  <Table>
    <ElementName>Copper</ElementName>
  </Table>
  <Table>
    <ElementName>Curcigtonium</ElementName>
  </Table>
  <Table>
    <ElementName>Curium</ElementName>
  </Table>
  <Table>
    <ElementName>Dysprosium</ElementName>
  </Table>
  <Table>
    <ElementName>Einsteinium</ElementName>
  </Table>
  <Table>
    <ElementName>Erbium</ElementName>
  </Table>
  <Table>
    <ElementName>Europium</ElementName>
  </Table>
  <Table>
    <ElementName>Fermium</ElementName>
  </Table>
  <Table>
    <ElementName>Flourine</ElementName>
  </Table>
  <Table>
    <ElementName>Francium</ElementName>
  </Table>
  <Table>
    <ElementName>Gadolinium</ElementName>
  </Table>
  <Table>
    <ElementName>Gallium</ElementName>
  </Table>
  <Table>
    <ElementName>Germanium</ElementName>
  </Table>
  <Table>
    <ElementName>Gold</ElementName>
  </Table>
  <Table>
    <ElementName>Hafnium</ElementName>
  </Table>
  <Table>
    <ElementName>Hahnium</ElementName>
  </Table>
  <Table>
    <ElementName>Hassium</ElementName>
  </Table>
  <Table>
    <ElementName>Helium</ElementName>
  </Table>
  <Table>
    <ElementName>Holmium</ElementName>
  </Table>
  <Table>
    <ElementName>Hydrogen</ElementName>
  </Table>
  <Table>
    <ElementName>Indium</ElementName>
  </Table>
  <Table>
    <ElementName>Iodine</ElementName>
  </Table>
  <Table>
    <ElementName>Iridium</ElementName>
  </Table>
  <Table>
    <ElementName>Iron</ElementName>
  </Table>
  <Table>
    <ElementName>Krypton</ElementName>
  </Table>
  <Table>
    <ElementName>Lanthanum</ElementName>
  </Table>
  <Table>
    <ElementName>Lawrencium</ElementName>
  </Table>
  <Table>
    <ElementName>Lead</ElementName>
  </Table>
  <Table>
    <ElementName>Lithium</ElementName>
  </Table>
  <Table>
    <ElementName>Lutetium</ElementName>
  </Table>
  <Table>
    <ElementName>Magnesium</ElementName>
  </Table>
  <Table>
    <ElementName>Manganese</ElementName>
  </Table>
  <Table>
    <ElementName>Meitnerium</ElementName>
  </Table>
  <Table>
    <ElementName>Mendelevium</ElementName>
  </Table>
  <Table>
    <ElementName>Mercury</ElementName>
  </Table>
  <Table>
    <ElementName>Molybdenum</ElementName>
  </Table>
  <Table>
    <ElementName>Neodymium</ElementName>
  </Table>
  <Table>
    <ElementName>Neon</ElementName>
  </Table>
  <Table>
    <ElementName>Neptunium</ElementName>
  </Table>
  <Table>
    <ElementName>Nickel</ElementName>
  </Table>
  <Table>
    <ElementName>Niobium</ElementName>
  </Table>
  <Table>
    <ElementName>Nitrogen</ElementName>
  </Table>
  <Table>
    <ElementName>Nobelium</ElementName>
  </Table>
  <Table>
    <ElementName>Osmium</ElementName>
  </Table>
  <Table>
    <ElementName>Oxygen</ElementName>
  </Table>
  <Table>
    <ElementName>Palladium</ElementName>
  </Table>
  <Table>
    <ElementName>Phosphorous</ElementName>
  </Table>
  <Table>
    <ElementName>Platinum</ElementName>
  </Table>
  <Table>
    <ElementName>Plutonium</ElementName>
  </Table>
  <Table>
    <ElementName>Polonium</ElementName>
  </Table>
  <Table>
    <ElementName>Potassium</ElementName>
  </Table>
  <Table>
    <ElementName>Praseodymium</ElementName>
  </Table>
  <Table>
    <ElementName>Promethium</ElementName>
  </Table>
  <Table>
    <ElementName>Protactinium</ElementName>
  </Table>
  <Table>
    <ElementName>Radium</ElementName>
  </Table>
  <Table>
    <ElementName>Radon</ElementName>
  </Table>
  <Table>
    <ElementName>Rhenium</ElementName>
  </Table>
  <Table>
    <ElementName>Rhodium</ElementName>
  </Table>
  <Table>
    <ElementName>Rubidium</ElementName>
  </Table>
  <Table>
    <ElementName>Ruthenium</ElementName>
  </Table>
  <Table>
    <ElementName>Samarium</ElementName>
  </Table>
  <Table>
    <ElementName>Scandium</ElementName>
  </Table>
  <Table>
    <ElementName>Seaborgium</ElementName>
  </Table>
  <Table>
    <ElementName>Selenium</ElementName>
  </Table>
  <Table>
    <ElementName>Silicon</ElementName>
  </Table>
  <Table>
    <ElementName>Silver</ElementName>
  </Table>
  <Table>
    <ElementName>Sodium</ElementName>
  </Table>
  <Table>
    <ElementName>Strontium</ElementName>
  </Table>
  <Table>
    <ElementName>Sulphur</ElementName>
  </Table>
  <Table>
    <ElementName>Tantalum</ElementName>
  </Table>
  <Table>
    <ElementName>Technetium</ElementName>
  </Table>
  <Table>
    <ElementName>Telurium</ElementName>
  </Table>
  <Table>
    <ElementName>Terbium</ElementName>
  </Table>
  <Table>
    <ElementName>Thallium</ElementName>
  </Table>
  <Table>
    <ElementName>Thorium</ElementName>
  </Table>
  <Table>
    <ElementName>Thulium</ElementName>
  </Table>
  <Table>
    <ElementName>Tin</ElementName>
  </Table>
  <Table>
    <ElementName>Titanium</ElementName>
  </Table>
  <Table>
    <ElementName>Tungsten</ElementName>
  </Table>
  <Table>
    <ElementName>Ununbium</ElementName>
  </Table>
  <Table>
    <ElementName>Ununnilium</ElementName>
  </Table>
  <Table>
    <ElementName>Unununium</ElementName>
  </Table>
  <Table>
    <ElementName>Uranium</ElementName>
  </Table>
  <Table>
    <ElementName>Vanadium</ElementName>
  </Table>
  <Table>
    <ElementName>Xenon</ElementName>
  </Table>
  <Table>
    <ElementName>Ytterbium</ElementName>
  </Table>
  <Table>
    <ElementName>Yttrium</ElementName>
  </Table>
  <Table>
    <ElementName>Zinc</ElementName>
  </Table>
  <Table>
    <ElementName>Zirconium</ElementName>
  </Table>
</NewDataSet>]]]]>><![CDATA[</GetAtomsResult>
</GetAtomsResponse>]]></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>true</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig action="http://www.webserviceX.NET/GetAtoms" mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/><con:environmentSpec><con:entry environmentId="503910e8-b75b-4e88-a1ab-c21298ebca09"><con:authProfile>Inherit From Parent</con:authProfile></con:entry></con:environmentSpec></con:request></con:config></con:testStep><con:testStep type="properties" name="GetAtomsProperties" id="19219c36-a5a2-4f56-9050-8ca652128167"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>AtNum</con:name><con:value>92</con:value></con:property><con:property><con:name>ElName</con:name><con:value>Uranium</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script Git" id="7fb06e6f-6faf-485a-ac3d-ee18d5583bc1"><con:settings/><con:config><script/></con:config></con:testStep><con:properties/><con:reportParameters/><con:environmentSpec><con:entry environmentId="503910e8-b75b-4e88-a1ab-c21298ebca09"><con:authProfile>Inherit From Parent</con:authProfile></con:entry></con:environmentSpec></con:testCase><con:properties><con:property><con:name>BoilPoint</con:name><con:value>4091</con:value></con:property><con:property><con:name>AtWeight</con:name><con:value>238.03</con:value></con:property><con:property><con:name>Symbol</con:name><con:value>U</con:value></con:property><con:property><con:name>ElName</con:name><con:value>Uranium</con:value></con:property><con:property><con:name>AtNum</con:name><con:value>92</con:value></con:property><con:property><con:name>AtNumb</con:name><con:value>92</con:value></con:property></con:properties><con:reportParameters/><con:environmentSpec><con:entry environmentId="503910e8-b75b-4e88-a1ab-c21298ebca09"><con:authProfile>Inherit From Parent</con:authProfile></con:entry></con:environmentSpec></con:testSuite><con:savedRecentRuns>1</con:savedRecentRuns><con:requirements/><con:properties><con:property><con:name>Endpoint</con:name><con:value>http://www.webservicex.net/periodictable.asmx</con:value></con:property></con:properties><con:wssContainer/><con:databaseConnectionContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:reporting><con:xmlTemplates/><con:parameters/></con:reporting><con:sensitiveInformation/><con:environment id="503910e8-b75b-4e88-a1ab-c21298ebca09" name="test1"><con:service type="SOAP" name="periodictableSoap"><con:endpoint authProfile="No Authorization"/></con:service><con:databaseConnectionContainer/></con:environment><con:authRepository/><con:environmentSpec><con:entry environmentId="503910e8-b75b-4e88-a1ab-c21298ebca09"><con:authProfile>No Authorization</con:authProfile></con:entry></con:environmentSpec><con:tags/></con:soapui-project>